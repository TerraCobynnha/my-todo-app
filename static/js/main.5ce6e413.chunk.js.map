{"version":3,"sources":["components/header.js","components/footer.js","components/clock.js","components/todoInput.js","components/todoList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Footer","Clock","props","state","time","fetchTime","bind","this","setState","clockTick","value","String","date","Date","hours","getHours","mins","getMinutes","secs","getSeconds","formatTime","setInterval","TodoInput","handleSubmit","handleChange","e","preventDefault","todo","refs","todoItem","trim","alert","updateId","handleUpdateTodoSave","handleNewTodo","handleInputChange","target","onSubmit","ref","type","onChange","placeholder","updateTask","TodoList","handleDelete","id","handleDeleteTodo","item","handleUpdateTodo","todos","todoList","map","key","onClick","handleUpdate","task","App","uuid","newTodo","oldTodoList","push","console","log","todoId","filter","updatedTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ce6e413.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Header extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1 className=\"heading\">Cobynnha's Todos</h1>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Footer extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <p className=\"footer\">Copyright &copy; 2019</p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Clock extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: \"\"\r\n        }\r\n        this.fetchTime = this.fetchTime.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState({time: \"00 : 00 : 00\"})\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.clockTick();\r\n    }\r\n\r\n    formatTime(value) {\r\n        if (value < 10) {\r\n            return \"0\"+ String(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    fetchTime() {\r\n        let date = new Date();\r\n        let hours = date.getHours();\r\n        let mins = date.getMinutes();\r\n        let secs = date.getSeconds();\r\n        let time = `${this.formatTime(hours)} : ${this.formatTime(mins)} : ${this.formatTime(secs)}`;\r\n\r\n        this.setState({time: time});\r\n    }\r\n\r\n    clockTick() {\r\n        setInterval(this.fetchTime, 1000);\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"clock\">\r\n                <h3>{this.state.time}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class TodoInput extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        let todo = this.refs.todoItem.value.trim();\r\n        if (todo === \"\") {\r\n            alert(\"Please enter a todo!\");\r\n\r\n        } else if (!this.props.updateId) {\r\n            this.props.handleNewTodo(todo);\r\n            \r\n        } else {\r\n            this.props.handleUpdateTodoSave(todo);\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.props.handleInputChange(e.target.value);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"todoInput\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input ref=\"todoItem\" type=\"text\" onChange={this.handleChange} placeholder=\"Enter a todo\" value={this.props.updateTask}/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class TodoList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n\r\n    handleDelete(id) {\r\n        this.props.handleDeleteTodo(id);\r\n    }\r\n\r\n    handleUpdate(item) {\r\n        this.props.handleUpdateTodo(item);\r\n    }\r\n\r\n    render(){\r\n        let todos = this.props.todoList;\r\n        todos = todos.map((item)=>{\r\n            return <li key={item.id}><span>--</span> <span onClick={this.handleUpdate.bind(this, item)}>{item.task}</span> <span onClick={this.handleDelete.bind(this, item.id)}>X</span> </li>\r\n        });\r\n        return(\r\n            <div className=\"todoList\">\r\n                {todos}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport Clock from './components/clock';\nimport TodoInput from './components/todoInput';\nimport TodoList from './components/todoList';\nimport uuid from 'uuid';\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      updateId: 0,\n      updateTask: \"\",\n      todoList: []\n    }\n    this.handleNewTodo = this.handleNewTodo.bind(this);\n    this.handleDeleteTodo = this.handleDeleteTodo.bind(this);\n    this.handleUpdateTodo = this.handleUpdateTodo.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleUpdateTodoSave = this.handleUpdateTodoSave.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      todoList: [\n        {\n          id: uuid(),\n          task: \"Buy food stuff\"\n        },\n        {\n          id: uuid(),\n          task: \"Finish react project\"\n        },\n        {\n          id: uuid(),\n          task: \"Fix faulty television\"\n        }\n      ]\n    })\n  }\n\n  handleNewTodo(newTodo) {\n    let oldTodoList = this.state.todoList;\n\n    // let newId = oldTodoList[oldTodoList.length-1].id + 1\n\n    newTodo = {\n      id: uuid(),\n      task: newTodo\n    }\n    oldTodoList.push(newTodo);\n\n    this.setState({\n      todoList: oldTodoList,\n      updateTask: \"\"\n    });\n    console.log(this.state.todoList);\n  }\n\n  handleDeleteTodo(todoId) {\n    let oldTodoList = this.state.todoList;\n\n    oldTodoList = oldTodoList.filter((item)=>{\n      return item.id !== todoId;\n    });\n\n    this.setState({\n      todoList: oldTodoList\n    });\n  }\n\n  handleUpdateTodo(item) {\n    this.setState({\n      updateId: item.id,\n      updateTask: item.task\n    });\n  }\n\n  handleUpdateTodoSave(todo) {\n    let oldTodoList = this.state.todoList;\n    let updatedTodo = {\n      id: this.state.updateId,\n      task: todo\n    }\n\n    oldTodoList = oldTodoList.filter((item)=>{\n      return item.id !== this.state.updateId;\n    });\n\n    oldTodoList.push(updatedTodo);\n\n    this.setState({\n      todoList: oldTodoList,\n      updateId: 0,\n      updateTask: \"\"\n    });\n  }\n\n  handleInputChange(value) {\n    this.setState({\n      updateTask: value\n    });\n  }\n\n  render() {\n    return(\n      <main className=\"App\">\n        <Header />\n        <Clock />\n        <TodoInput handleUpdateTodoSave={this.handleUpdateTodoSave} handleInputChange={this.handleInputChange} updateTask={this.state.updateTask} updateId={this.state.updateId} handleNewTodo={this.handleNewTodo} />\n        <TodoList handleUpdateTodo={this.handleUpdateTodo} handleDeleteTodo={this.handleDeleteTodo} todoList={this.state.todoList} />\n        <Footer />\n      </main>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}